# -*- coding: utf-8 -*-
"""OS_proj2_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10kpkxTk7nxOnrhGJoT0kfVXJpcQSzi31
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
import numpy as np

def sort_dataset(dataset_df):
   sort_dataset = dataset_df.sort_values(by='year', ascending=True)
   return sort_dataset

def split_dataset(dataset_df):
  dataset_df['salary'] *= 0.001

  train_df = dataset_df.iloc[:1718, :]
  test_df = dataset_df.iloc[1718:, :]

  X_train = train_df.drop('salary', axis=1)
  Y_train = train_df['salary']

  X_test = test_df.drop('salary', axis=1)
  Y_test = test_df['salary']

  return X_train, X_test, Y_train, Y_test

def extract_numerical_cols(dataset_df):
  num_cols = ['age', 'G', 'PA', 'AB', 'R', 'H', '2B', '3B', 'HR',
                          'RBI', 'SB', 'CS', 'BB', 'HBP', 'SO', 'GDP', 'fly', 'war']
  num_df = dataset_df[num_cols]

  return num_df
def train_predict_decision_tree(X_train, Y_train, X_test):
   decision_tree = DecisionTreeRegressor()
   decision_tree.fit(X_train, Y_train)

   pred = decision_tree.predict(X_test)

   return pred
def train_predict_random_forest(X_train, Y_train, X_test):
  rf_regressor = RandomForestRegressor()
  rf_regressor.fit(X_train, Y_train)

  pred = rf_regressor.predict(X_test)

  return pred
def train_predict_svm(X_train, Y_train, X_test):
  pipeline = Pipeline([
      ('scaler', StandardScaler()),
      ('svm', SVR())
  ])

  pipeline.fit(X_train, Y_train)

  pred = pipeline.predict(X_test)

  return pred
def calculate_RMSE(labels, pred):
  rmse = np.sqrt(mean_squared_error(labels, pred))

  return rmse
if __name__=='__main__':
   data_df = pd.read_csv('/content/sample_data/2019_kbo_for_kaggle_v2.csv')

   sorted_df = sort_dataset(data_df)
   X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)

   X_train = extract_numerical_cols(X_train)
   X_test = extract_numerical_cols(X_test)

   dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
   rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
   svm_predictions = train_predict_svm(X_train, Y_train, X_test)

   print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
   print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
   print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))